// ignore identity for now
WHITESPACE = _{ " " }
identity = { "."{1} }

identifier = { (ASCII_ALPHANUMERIC | "_")+ }
digits = { ASCII_DIGIT+ }

slice_from = { digits+ }
slice_to = { digits+ }

recurse = { ".." }
index_reverse = { "[-" ~ digits+ ~ "]" }
index = { "[" ~ digits+ ~ "]" }
index_multiple = { "[" ~ (digits+ ~ ","?)+ ~ "]" }
slice = { "[" ~ slice_from? ~ ":" ~ slice_to? ~ "]" }
iterator = { "[]" }

string = { (!"\"" ~ ANY)+ }
number = _{ unsigned_number | signed_number }
unsigned_number = { "(unsigned)"? ~ digits+ }
signed_number = { (("(signed)" ~ minus) | ("(signed)" | minus)) ~ digits+ }
quoted_string = _{ "\"" ~ string ~ "\"" }
datatypes = _{ quoted_string | number }

// arithmetic
plus  = { "+" }
minus = { "-" }

// functions
select = { "select(" ~ bool_expression ~ ")" }
transpose = { "transpose" }

// comparisons
equal = { "==" }
not_equal = { "!=" }
less_than = { "<" }
greater_than = { ">" }
compare = { equal | not_equal | less_than | greater_than }
bool_expression = _{ filter_with_op+ ~ compare ~ filter_with_op+ }

field = { identifier }
key = { identifier ~ ":" }

named_query = { key ~ (!("," ~ &key) ~ filter_with_op)+ }
object_construct = { "{" ~ (named_query ~ operator?)+ ~ "}" }
array_construction = { "[" ~ filter_with_op* ~ "]" }

optional = { "?" }

query = { filter_with_op+ }

filter = _{ transpose | select | recurse | identity | field | index_reverse | index | index_multiple | slice }
filter_with_op = _{ operator? ~ (object_construct | array_construction | datatypes | filter) }

pipe = { "|" }
comma = { "," }

operator = _{ pipe | comma }

program = _{ SOI ~ filter_with_op+ }
